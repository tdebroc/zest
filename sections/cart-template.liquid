{% assign show_single_variant_details = true %}


<div class="container" data-section-type="cart-template">

{% if cart.item_count == 0 %}

  <h2 class="page-title">{{ 'cart.general.empty_title' | t }}</h2>
  <div class="rte"><a href="{{ routes.all_products_collection_url }}">{{ 'cart.general.empty_subtext' | t }}</a></div>

{% else %}

  <div class="reading-column">

    <h1 class="page-title">{{ 'cart.general.title' | t }}</h1>

    {% if section.settings.cart_notification_show and section.settings.cart_notification_pos != 'under-items' %}
      <div class="notification">
        <div class="rte">{{ section.settings.cart_notification_text }}</div>
      </div>
    {% endif %}

    <form class="cart-form" action="{{ routes.cart_url }}" method="post" id="cartform">
      <div class="spaced opposing-items">
        {% for item in cart.items %}
          {% if forloop.first %}
            {% assign collection_url = item.product.collections.first.url %}
            {% if collection_url == nil or collection_url == empty or collection_url contains 'frontpage' %}{% capture collection_url %}{{ routes.all_products_collection_url }}{% endcapture %}{% endif %}
          {% endif %}
        {% endfor %}
        <a class="more-link left" href="/collections/all">{{ 'cart.general.continue' | t }}</a>


      </div>
      <div class="iweb-order-delivery-dt-pro"></div>

      <div id="postalCode-wrapper">
        <input type="text" id="datePicker" placeholder="Entrez votre date de livraison"/><br/>

        <div id="cart-timeSelector">
          <select onchange="onTimeChange()" class="nothing-selected">
            <option disabled selected value>Choisissez votre heure de livraison</option>
            <option value="1">17h30 à 19h00</option>
            <option value="2">18h30 à 20h00</option>
            <option value="3">19h30 à 21h30</option>
          </select>
        </div>
        <div id="delivery-zone-choser">
              <div class="delivery-zone-option pointer" data-deliveryOption="pick-up" onClick="selectDeliveryOption(this)">
                  <input type="radio" name="delivery-zone"/>
                  <span class="inputLabel">Je viens récupérer sur place !</span><br/>
                  <span class="delivery-price-message">5 rue Crillon, 75004 (à coté de Bastille)</span><br/>
                  <span class="delivery-price-message">Pas de frais de livraison</span>
                  <div class="removing-extra-shipping-message">
                      <span>
                          <img class="loader-orange-circle" src="{{ 'loading-orange-circle.gif' | asset_url }}" />
                          Ok ! Nous retirons le supplément.
                      </span>
                  </div>
              </div>
              <div class="delivery-zone-option pointer" data-deliveryOption="inside-paris" onClick="selectDeliveryOption(this)">
                  <input type="radio" name="delivery-zone"/>
                  <span class="inputLabel">J'habite Paris intra-muros </span><br/>
                  <span class="delivery-price-message">La livraison revient à <span class="shipping-base-price"></span>€</span>
                  <div class="removing-extra-shipping-message">
                      <span>
                          <img class="loader-orange-circle" src="{{ 'loading-orange-circle.gif' | asset_url }}" />
                          Ok ! Nous retirons le supplément.
                      </span>
                  </div>
              </div>
              <div class="delivery-zone-option" data-deliveryOption="outside-paris" onClick="selectDeliveryOption(this)">
                  <div>
                      <input type="radio" name="delivery-zone" disabled/>
                      <span class="inputLabel" style="color: grey;">J'habite en région Parisienne</span>
                  </div>
                  <div class="delivery-price-message">
                    Cette option n'est pas encore disponible, mais patience ! Zestez nous un appel au 06 36 16 93 83 ou <a href="/pages/contact" style="text-decoration:underline">contactez nous ici</a> !
                  </div>
                  <!--
                  <div id="adding-extra-shipping-message">
                      <span>
                          <img class="loader-orange-circle" src="{{ 'loading-orange-circle.gif' | asset_url }}" />
                          Ok ! Nous ajoutons le supplément.
                      </span>
                  </div>
                  <div>
                      <input name="input-delivery-zone-paris"
                             onkeyup="onPostalCodeChange()"
                             type=text id="input-delivery-zone-outside-paris"
                             placeholder="A quel Code Postal ?"/>
                  </div>
                  <div>
                      <span class="delivery-price-message">La livraison revient à <span id="shipping-total-price-outside-paris"></span>€
                          (supplément de <span id="extraShippingPrice"></span>€ pour le coup de pédale en plus)</span>
                  </div>
                  -->
              </div>
        </div>
        <div style="clear: both;"></div>
        <script type="text/javascript">
          let CART_CONTENT = {{ cart | json }};
          // ================================================================
          // = CONFIG
          // ================================================================
          let EXTRA_SHIPPING_HANDLE = "supplement-livraison";
          let SHIPPING_BASE_PRICE = 3.5;
          let DEFAULT_MIN_TIME = "17:30";
          let DEFAULT_MAX_TIME_FOR_TODAY = "19:30";
          let DEFAULT_MAX_TIME = "21:30";
          let MESSAGE_OUTSIDE_OF_ZONE = "Désolé nous ne livrons pas cette zone encore. Nous livrons dans le 92, 93, 94";
          /* /!\ Be careful if you change the attribute name "Date et Heure de Livraison".
               * This value is used in the Thank You Script Page, you should modify it here:
               * https://zest-test.myshopify.com/admin/settings/checkout in script section. */
          let DATE_HOUR_ATTR_KEY = "Date et Heure de Livraison";
          let DELIVERY_OPTION_ATTR_KEY = "Delivery Option";
          let POSTAL_CODE_ATTR_KEY = "Postal Code";
          let PETIT_MOT_EN_PLUS_KEY = "Petit mot en plus";
          let DATE_HOUR_SEPARATOR = " de ";
          let SHIPPING_MESSAGE_ADD_BASE_PRICE = "Le tarif de base pour la livraison (" + SHIPPING_BASE_PRICE + "€) sera rajouté à la prochaine étape.";
          let QUANTITY_ADDING_FORBIDDEN = ["mont-dor"];
          let PRE_COMMAND_HANDLE_LIST = ["copie-de-planche-classico-raclette", "planche-raclette-veggie"];
          // ================================================================
          // = API Utils
          // ================================================================
          function updateCart(formData, callback) {
              jQuery
                  .post('/cart/update.js', formData)
                  .done(handleJQueryCallback.bind(this, callback))
                  .fail(handleJQueryCallback.bind(this, callback))
          }
          function handleJQueryCallback(callback, json) {
              if (json.status === 422) {
                  alert("Erreur 422 lors de la prise de commande, il faut appeler Zest, ils vont régler cela de suite !");
              } else if (json.status === 200)  {
                  if (callback) {
                      callback(null, true)
                  } else {
                      console.log("Success for API call.")
                  }
              } else {
                  alert("Erreur " + json.status + " lors de la prise de commande, il faut appeler Zest, ils vont régler cela de suite !");
              }
          }
          function getNewFormData() {
              return {
                  attributes : {},
                  updates : {}
              }
          }
          function shouldLaunchApiCall(formData) {
              return doesItModifyCartItems(formData) || doesItModifyCartAttributes(formData);
          }
          function doesItModifyCartItems(formData) {
              return Object.keys(formData.updates).length > 0;
          }
          function doesItModifyCartAttributes(formData) {
              return Object.keys(formData.attributes).length > 0;
          }
          // ================================================================
          // = Date & Date Choser
          // ================================================================
          let datePickerEl = $("#datePicker");
          let timeSelectorEl = $("#cart-timeSelector");
          let currentDateObj = new Date()
          let currentDate = currentDateObj.toLocaleDateString('fr-FR') // DD-MM-YYYY
          let currentDay = currentDate.split("/")[2] + "-" + currentDate.split("/")[1] + "-" + currentDate.split("/")[0]
          let disabledDates = [];
          // disabledDates.push(function(date) {return (date.getDay() === 1);}) // Disable Monday
          disabledDates.push(function(date) {return (date.getTime() + 24 * 60 * 60 * 1000 < currentDateObj.getTime());}) // Disable Previous Days
          if (isTherePreCommandProduct()) {
              disabledDates.push("2020-12-01");
              disabledDates.push("2020-12-02");
              disabledDates.push("2020-12-03");
          }
          disabledDates.push("2020-12-24");
          disabledDates.push("2020-12-25");
          disabledDates.push("2020-12-26");
          disabledDates.push("2020-12-27");
          disabledDates.push("2021-01-01");
          disabledDates.push("2021-01-10");
          disabledDates.push("2021-01-11");
          disabledDates.push("2021-02-15");
          disabledDates.push("2021-02-22");
          disabledDates.push("2021-03-01");
          disabledDates.push("2021-03-08");
          disabledDates.push("2021-03-15");
          disabledDates.push("2021-03-22");
          disabledDates.push("2021-03-29");
          disabledDates.push("2021-04-05");
          disabledDates.push("2021-04-12");
          disabledDates.push("2021-04-19");
          disabledDates.push("2021-04-26");
          
          if (!isCurrentDayAllowed()) {
            disabledDates.push(currentDay)
          }
          let options = {
            enableTime: false,
            // defaultDate: currentDay + " 17:30",
            "locale": "fr",
            "disable": disabledDates,
            onChange: function(selectedDates, dateStr) {
              sendDateIfValid(dateStr)
            },
          }
          let FLAT_FICKER = flatpickr("#datePicker", options);
          function isTimeChosen() {
            return $("#cart-timeSelector option:selected").val() !== "";
          }
          function getTimeChosen() {
            return $("#cart-timeSelector option:selected").text();
          }
          function getDateChosen() {
            return FLAT_FICKER.selectedDates.length === 0 ? "" : FLAT_FICKER.selectedDates[0].toLocaleDateString('fr-FR');
          }
          function onTimeChange() {
              handleTimeSelected();
              sendDateIfValid();
          }
          function handleTimeSelected() {
              $("#cart-timeSelector select").removeClass("nothing-selected");
          }
          function sendDateIfValid() {
            let timeChosen = getTimeChosen();
            if (!isDateTimeOK()) {
              return;
            }
            let date = getDateChosen();
            let formData = getNewFormData();
            formData["attributes"][DATE_HOUR_ATTR_KEY] = date + DATE_HOUR_SEPARATOR + timeChosen;
            updateCart(formData);
          }
          function isCurrentDayAllowed() {
            let currentHour = new Date().getHours();
            let currentMin = new Date().getMinutes();
            let maxHourAllowed = parseInt(DEFAULT_MAX_TIME_FOR_TODAY.split(":")[0])
            let maxMinAllowed = parseInt(DEFAULT_MAX_TIME_FOR_TODAY.split(":")[1])
            return currentHour * 60 + currentMin < maxHourAllowed * 60 + maxMinAllowed;
          }
          function isCurrentDay(dateStr) {
            return currentDay === dateStr.substring(0, 10)
          }
          function isDatePicked() {
            return datePickerEl.val() !== "";
          }
          function isDateTimeOK() {
            return isDatePicked() && getTimeChosen().length !== 0 && isTimeChosen();
          }
          function isTherePreCommandProduct() {
              return CART_CONTENT.items.map(item => item.handle).filter(handle => PRE_COMMAND_HANDLE_LIST.includes(handle)).length > 0;
          }
          // ================================================================
          // = Delivery Zone
          // ================================================================
          let shippingExtraProduct;
          let allOptionEls = $("#delivery-zone-choser .delivery-zone-option");
          let postalCodeOutsideParisEl = $("#input-delivery-zone-outside-paris");
          let numbers = /^[-+]?[0-9]+$/;
          function selectDeliveryOption(el, isInit) {
            let deliveryOption = $(el).attr("data-deliveryOption");
            if (deliveryOption === 'outside-paris') {
                // Feature is not enabled while we don't know shipping prices from vendors.
                return;
            }
            allOptionEls.removeClass("selected");
            $(el).addClass("selected");
            allOptionEls.find("input").prop('checked', false);
            $(el).closest(".delivery-zone-option").find("input").prop('checked', true);
            let formData = getNewFormData();
            setShippingMessageAddBasePrice(deliveryOption);
            if (deliveryOption === 'outside-paris') {
              if (shouldChangeExtra(1)) {
                formData["updates"][getShippingExtraVariantId()] = 1;
                showingAddingShippingExtra();
              } else {
                postalCodeOutsideParisEl.focus()
              }
            } else {
                if (postalCodeOutsideParisEl.val() !== "") {
                    postalCodeOutsideParisEl.val("");
                    formData.attributes[POSTAL_CODE_ATTR_KEY] = "";
                }
                if (shouldChangeExtra(0)) {
                    formData.updates[getShippingExtraVariantId()] = 0;
                    showRemovingExtraShipping(deliveryOption);
                }
            }
            if (isInit) {
                return;
            }
            if (currentData.deliveryOption !== deliveryOption) {
                formData.attributes[DELIVERY_OPTION_ATTR_KEY] = deliveryOption;
            }
            modifyCart(formData)
          }
          function showRemovingExtraShipping(deliveryOption) {
              $("#delivery-zone-choser .delivery-zone-option[data-deliveryOption=" + deliveryOption + "] .removing-extra-shipping-message").show()
          }
          function setShippingMessageAddBasePrice(deliveryOption) {
              $("#shipping-message-add-base-price").text(
                  (deliveryOption !== "outside-paris") ? "Frais de livraison calculés à la prochaine étape" : SHIPPING_MESSAGE_ADD_BASE_PRICE)
          }
          function modifyCart(formData) {
              if (!shouldLaunchApiCall(formData)) {
                  return;
              }
              updateCart(formData, function() {
                  if (doesItModifyCartItems(formData)) {
                      window.location.reload();
                  }
              });
          }
          function doesCartHaveShippingExtra() {
              return CART_CONTENT.items.filter(item => item.variant_id === getShippingExtraVariantId()).length > 0;
          }
          function isValidPostalCode(postalCode) {
            return postalCode.length === 5 && postalCode.match(numbers);
          }
          function isAllowedPostalCodeForOutsideParis(postalCode) {
            return postalCode.startsWith("92")
                    || postalCode.startsWith("93")
                    || postalCode.startsWith("94")
          }
          let PAD_TIME = 10;
          let timeLeft = -PAD_TIME;
          function onPostalCodeChange() {
            timeLeft = 200;
          }
          function checkIfWeHandleChange() {
            timeLeft -= PAD_TIME;
            if (timeLeft === 0) {
              handlePostalCodeChange();
            }
            setTimeout(checkIfWeHandleChange, PAD_TIME)
          }
          checkIfWeHandleChange()

          function handlePostalCodeChange() {
            let postalCode = postalCodeOutsideParisEl.val()
            if (postalCode.length < 5) {
              return;
            }
            if (currentData.postalCode === postalCode) {
                return;
            }
            currentData.postalCode = postalCode;
            postalCodeOutsideParisEl.removeClass("error")
            if (!isValidPostalCode(postalCode)) {
              postalCodeOutsideParisEl.addClass("error");
              return;
            }
            if (!isAllowedPostalCodeForOutsideParis(postalCode)) {
              alert(MESSAGE_OUTSIDE_OF_ZONE);
              return;
            }
            let formData = getNewFormData();
            formData.attributes[POSTAL_CODE_ATTR_KEY] = postalCode;
            modifyCart(formData)
          }

          function shouldChangeExtra(quantity) {
            return doesCartHaveShippingExtra() && quantity === 0 || !doesCartHaveShippingExtra() && quantity === 1;
          }
          console.log(jQuery.isReady)
          function getShippingExtraProduct() {
              return fetch('/products/' + EXTRA_SHIPPING_HANDLE + '.js')
                  .then(response => response.json())
                  .then(data => {
                      shippingExtraProduct = data;
                      displayInfoFromShippingExtraProduct();
                      return data;
                  });
          }
          function displayInfoFromShippingExtraProduct() {
              $("#shipping-total-price-outside-paris").text(
                  (shippingExtraProduct.price / 100) + SHIPPING_BASE_PRICE
              );
              $("#extraShippingPrice").text(shippingExtraProduct.price / 100);
              if (jQuery.isReady) {
                  forbidQuantityModificationForShippingExtra();
              } else {
                  $(document).ready(forbidQuantityModificationForShippingExtra)
              }
          }
          function showingAddingShippingExtra() {
              $("#adding-extra-shipping-message").show();
              postalCodeOutsideParisEl.hide();
          }

          function forbidQuantityModificationForShippingExtra() {
              let selectorQtyAdjuster = ".qty-adjuster[data-variantId=" +  getShippingExtraVariantId() + "]";
              forbidQuantityModification(selectorQtyAdjuster, 1);
          }

          function forbidQuantityModification(selectorQtyAdjuster, quantity) {
              let parentEl = $(selectorQtyAdjuster).parent()
              parentEl.text(quantity);
              parentEl.css("padding-top", "9px");
          }

          function getShippingExtraVariantId() {
              return shippingExtraProduct.variants[0].id
          }

          function isShippingSelected() {
              return $("input[name=delivery-zone]:checked").length > 0
          }
          function getShippingSelectedValue() {
              return $("input[name=delivery-zone]:checked").closest(".delivery-zone-option").attr("data-deliveryOption")
          }
          $(".shipping-base-price").text(SHIPPING_BASE_PRICE)
          // ================================================================
          // = Init Forms
          // ================================================================
          // Init Date & Time
          function getDateFromCartAttr() {
              return CART_CONTENT.attributes[DATE_HOUR_ATTR_KEY] ?
                  CART_CONTENT.attributes[DATE_HOUR_ATTR_KEY].split(DATE_HOUR_SEPARATOR)[0] : undefined;
          }
          function getTimeFromCartAttr() {
              return CART_CONTENT.attributes[DATE_HOUR_ATTR_KEY] ?
                  CART_CONTENT.attributes[DATE_HOUR_ATTR_KEY].split(DATE_HOUR_SEPARATOR)[1] : undefined;
          }
          function getDeliveryOptionFromCartAttr() {
              return CART_CONTENT.attributes[DELIVERY_OPTION_ATTR_KEY] ?
                  CART_CONTENT.attributes[DELIVERY_OPTION_ATTR_KEY] : undefined;
          }
          function getDeliveryOptionFromCartAttr() {
              return CART_CONTENT.attributes[POSTAL_CODE_ATTR_KEY] ?
                  CART_CONTENT.attributes[POSTAL_CODE_ATTR_KEY] : undefined;
          }
          function init() {
              if (CART_CONTENT.attributes[DATE_HOUR_ATTR_KEY]) {
                  datePickerEl.val(getDateFromCartAttr())
                  $("#cart-timeSelector option:contains(" + getTimeFromCartAttr() + ")").eq(0).prop('selected', true);
                  handleTimeSelected();
              }
              let deliveryOption = CART_CONTENT.attributes[DELIVERY_OPTION_ATTR_KEY];
              if (deliveryOption) {
                  let el = $("#delivery-zone-choser .delivery-zone-option[data-deliveryOption='" + deliveryOption + "']").get(0)
                  selectDeliveryOption(el, true);
                  currentData.deliveryOption = deliveryOption;
              }
              let postalCode = CART_CONTENT.attributes[POSTAL_CODE_ATTR_KEY];
              if (postalCode) {
                  postalCodeOutsideParisEl.val(postalCode)
                  currentData.postalCode = postalCode
              }
          }
          let currentData = {}
          getShippingExtraProduct()
            .then(init);

          // ================================================================
          // = Un Petit Mot en Plus
          // ================================================================

          let PAD_TIME_PETIT_MOT = 20;
          let timeLeftForPetitMot = -PAD_TIME_PETIT_MOT;
          function onKeyUpPetitMotEnPlus() {
              timeLeftForPetitMot = 1000;
          }
          function checkIfWeHandleChangeOnPetitMotEnPlus() {
              timeLeftForPetitMot -= PAD_TIME_PETIT_MOT;
              if (timeLeftForPetitMot === 0) {
                  handlePetitMotEnPlusChange();
              }
              setTimeout(checkIfWeHandleChangeOnPetitMotEnPlus, PAD_TIME_PETIT_MOT)
          }
          checkIfWeHandleChangeOnPetitMotEnPlus()

          function handlePetitMotEnPlusChange() {
              console.log("should handle petit mot");
              let petitMotEnPlus = $("#un-petit-mot-en-plus").val();
              let formData = getNewFormData();
              formData["attributes"][PETIT_MOT_EN_PLUS_KEY] = petitMotEnPlus;
              updateCart(formData);
          }

          // ================================================================
          // = Alcool Verification
          // ================================================================
          function isThereOnlyAlcoolProducts() {
              // TODO: To implement
              return false
          }

          // ================================================================
          // = Checkout Button
          // ================================================================
          function isCheckoutAllowed() {
            if (!isDateTimeOK()) {
              alert("Merci de rentrer la date et l'heure souhaité pour la livraison.");
              scrollTo("#datePicker");
              return false;
            }
            if (!isShippingSelected()) {
                alert("Vous devez choisir la façon dont nous allons vous livrer.")
                scrollTo("#delivery-zone-choser");
                return false
            }
            let postalCode = postalCodeOutsideParisEl.val();
            if (getShippingSelectedValue() === 'outside-paris' && !isValidPostalCode(postalCode)) {
                alert("Le code Postal n'est pas valide.")
                scrollTo("#delivery-zone-choser");
                postalCodeOutsideParisEl.focus();
                return false
            }
            if (getShippingSelectedValue() === 'outside-paris' && !isAllowedPostalCodeForOutsideParis(postalCode)) {
              alert(MESSAGE_OUTSIDE_OF_ZONE);
              scrollTo("#delivery-zone-choser");
                postalCodeOutsideParisEl.focus();
              return false
            }
            if (isThereOnlyAlcoolProducts()) {
                return false
            }
            return true;
          }
          function scrollTo(selector) {
            $([document.documentElement, document.body]).animate({
              scrollTop: $(selector).offset().top - 100
            }, 500);
          }
        </script>
      </div>

      <ul class="cart-items plain">
        <li class="cart-item cart-items__heading border-bottom">
          <span class="cart-item__description-and-image">{{ 'cart.label.description' | t }}</span>
          <span class="cart-item__price">{{ 'cart.label.price' | t }}</span>
          <span class="cart-item__quantity">{{ 'cart.label.quantity' | t }}</span>
          <span class="cart-item__total">{{ 'cart.label.total' | t }}</span>
        </li>
        {% for item in cart.items %}
          <li class="cart-item border-bottom cf">
            <div class="cart-item__image">
              <a class="image" href="{{ item.url }}">
                <img src="{{ item | img_url: '100x' }}" alt="{{ item.title | escape }}"
                     srcset="{{ item | img_url: '100x' }} 100w,
                              {{ item | img_url: '200x' }} 200w" sizes="100px"/>
              </a>
            </div>

            <div class="cart-item__not-image">
              <div class="cart-item__description">
                <div>{{ item.product.title | link_to: item.product.url }}</div>
                {% if item.product.variants.size > 1 %}
                  <span class="variant">{{ item.variant.title }}</span>
                {% elsif show_single_variant_details %}
                  {% unless item.product.has_only_default_variant %}
                    <span class="variant">{{ item.variant.title }}</span>
                  {% endunless %}
                {% endif %}
                {% comment %} Line Item Properties {% endcomment %}
                {% for p in item.properties %}
                  <div class="property">
                    {% unless p.last == blank %}
                      <span class="label">{{ p.first }}:</span>
                      {% if p.last contains '/uploads/' %}
                        <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                      {% else %}
                        {{ p.last }}
                      {% endif %}
                      <br />
                    {% endunless %}
                  </div>
                {% endfor %}

                {% if section.settings.show_backorder_text == true %}
                  {% render 'backorder', product: item.product, variant: item.variant %}
                {% endif %}
              </div>


              <div class="cart-item__price">
                <div class="cart-item__price__amount">
                  {% if item.original_line_price > item.final_line_price %}
                    <div class="struck-out-price theme-money"><div class="pn-price-item" data-id="{{ item.key }}">{{ item.original_price | money }}</div></div>
                    <div class="cart-item__price-current reduced-price theme-money">{{ item.final_price | money }}</div>
                  {% elsif item.variant.compare_at_price != blank and item.variant.price < item.variant.compare_at_price %}
                    <div class="theme-money struck-out-price">{{ item.variant.compare_at_price | money }}</div>
                    <div class="cart-item__price-current reduced-price theme-money">{{ item.final_price | money }}</div>
                  {% else %}
                    <div class="cart-item__price-current theme-money">{{ item.final_price | money }}</div>
                  {% endif %}
                </div>

                {% render 'unit-price', variant: item %}
              </div>
              <div class="cart-item__quantity">
                <div class="qty-adjuster" data-handle="{{ item.handle }}" data-variantId="{{ item.variant_id }}" data-url="{{ item.url }}">
                  <div class="qty-adjuster__inner">
                    <a class="qty-adjuster__down" href="{{ routes.cart_change_url }}?line={{ forloop.index }}&quantity={{ item.quantity | minus: 1 }}">{% render 'svg-minus' %}</a>
                    <input class="qty-adjuster__value" type="text" pattern="[0-9]*" name="updates[]" value="{{ item.quantity }}" aria-label="{{ 'cart.label.quantity' | t | escape }}">
                    <a class="qty-adjuster__up"
                       href="{{ routes.cart_change_url }}?line={{ forloop.index }}&quantity={{ item.quantity | plus: 1 }}"
                       {% if item.variant.inventory_management == 'shopify' and item.variant.inventory_policy == 'deny' and item.variant.inventory_quantity == item.quantity %}disabled{% endif %}
                    >
                      {%- render 'svg-plus' -%}
                    </a>
                  </div>
                  <a class="qty-adjuster__remove" onclick="return confirm('{{ 'cart.general.confirm_remove' | t }}')" href="{{ routes.cart_change_url }}?line={{ forloop.index }}&quantity=0">{{ 'cart.general.remove' | t }}</a>
                </div>
              </div>

              <div class="cart-item__total">
                <div class="cart-item__total__amount">
                  {% if item.original_line_price != item.final_line_price %}
                    <div class="struck-out-price theme-money"><div class="pn-total-line-item" data-id="{{ item.key }}">{{ item.original_line_price | money }}</div></div>
                    <div class="cart-item__price-current reduced-price theme-money">{{ item.final_line_price | money }}</div>
                  {% elsif item.variant.compare_at_price != blank and item.variant.price < item.variant.compare_at_price %}
                    <div class="struck-out-price theme-money">{{ item.variant.compare_at_price | times: item.quantity | money }}</div>
                    <div class="cart-item__price-current reduced-price theme-money">{{ item.final_line_price | money }}</div>
                  {% else %}
                    <div class="cart-item__price-current theme-money">{{ item.final_line_price | money }}</div>
                  {% endif %}
                </div>

                {% if item.line_level_discount_allocations.size > 0 %}
                  <ul class="cart-discount-list">
                    {% for discount_allocation in item.line_level_discount_allocations %}
                      <li class="cart-discount">
                        <div class="cart-discount__label">{{ discount_allocation.discount_application.title }}</div>
                        <div class="cart-discount__amount theme-money">{{ discount_allocation.amount | money }}</div>
                      </li>
                    {% endfor %}
                  </ul>
                {% endif %}
              </div>
            </div>
          </li>
        {% endfor %}
      </ul>


      {% if section.settings.cart_notification_show and section.settings.cart_notification_pos == 'under-items' %}
        <div class="notification">
          <div class="rte">{{ section.settings.cart_notification_text }}</div>
        </div>
      {% endif %}
      <div class="row spaced-row">
          <div class="half column">
              &nbsp;
          </div>
          <div class="half column align-right">
              <textarea placeholder="Un petit mot en plus ?" id="un-petit-mot-en-plus"
                    onkeyup="onKeyUpPetitMotEnPlus()"></textarea>
          </div>
      </div>

      <div class="row spaced-row">
        <div class="half column">
          {% if section.settings.show_notes %}
            <label class="cart-note-label" for="note">{{ 'cart.label.note' | t }}</label>
            <textarea id="note" name="note" rows="10" cols="50">{{ cart.note }}</textarea>
          {% else %}
            &nbsp;
          {% endif %}
        </div>

        <div class="half column align-right">
          {%- if cart.cart_level_discount_applications != blank -%}
            <ul class="cart-discount-list cart-discount-list--by-subtotal">
              {%- for discount_application in cart.cart_level_discount_applications -%}
                <li class="cart-discount cart-discount--inline">
                  <span class="cart-discount__label">{{ discount_application.title }}</span>
                  <span class="cart-discount__amount theme-money">{{ discount_application.total_allocated_amount | money }}</span>
                </li>
              {%- endfor -%}
            </ul>
          {%- endif -%}



          <div class="cart-subtotal">
            <label class="cart-subtotal-label h2" for="checkout">{{ 'cart.general.subtotal' | t }}:</label>
            <span class="theme-money h2">{{ cart.total_price | money }}</span>
          </div>

          {% if section.settings.show_tax_and_shipping %}
            {%- capture taxes_shipping_checkout -%}
              {%- if shop.taxes_included and shop.shipping_policy.body != blank -%}
                {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
              {%- elsif shop.taxes_included -%}
                {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
              {%- elsif shop.shipping_policy.body != blank -%}
                {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
              {%- else -%}
                {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
              {%- endif -%}
            {%- endcapture -%}

            <div id="shipping-message-add-base-price" class="cart-policies rte lightly-spaced-row">{{ taxes_shipping_checkout }}</div>
          {% endif %}

          <div class="cart-buttons">
            <button class="checkout-button checkout-button--lower"
                    onClick="return isCheckoutAllowed();"
                    type="submit" name="checkout">{{ 'cart.general.checkout' | t }}</button>
          </div>


        </div>
        {% endif %}
      </div>
  </div>
  </form>

  {% render 'shipping-calculator' %}

</div>


</div>

<script type="text/javascript">
    // ================================================================
    // = Forbid Quantity modification
    // ================================================================

    QUANTITY_ADDING_FORBIDDEN.forEach(
        handle => {
            let selector = ".qty-adjuster[data-url*='/" + handle + "?']";
            $(selector).find(".qty-adjuster__up").remove()
        }
    )
</script>


{% schema %}
{
"name": "Cart page",
"settings": [
{
"type": "checkbox",
"id": "show_notes",
"label": "Enable cart notes",
"default": true
},
{
"type": "checkbox",
"id": "show_tax_and_shipping",
"label": "Show tax and shipping information",
"default": true
},
{
"type": "checkbox",
"id": "show_additional_checkout_buttons",
"label": "Show additional checkout options",
"default": true,
"info": "Display other gateways and quick checkout buttons. [Read more](https://help.shopify.com/en/manual/payments/accelerated-checkouts)"
},
{
"type": "checkbox",
"id": "show_backorder_text",
"label": "Show backorder text",
"default": true,
"info": "Only shows for products which use Shopify inventory tracking and are available to purchase when out of stock."
},
{
"type": "header",
"content": "Cart announcement"
},
{
"type": "checkbox",
"id": "cart_notification_show",
"label": "Show announcement",
"default": false
},
{
"type": "richtext",
"id": "cart_notification_text",
"label": "Text"
},
{
"type": "select",
"id": "cart_notification_pos",
"label": "Position",
"default": "",
"options": [
{
"value": "",
"label": "Under page title"
},
{
"value": "under-items",
"label": "Under items"
}
]
},
{
"type": "header",
"content": "Shipping estimates calculator"
},
{
"type": "checkbox",
"id": "shipping_calculator",
"label": "Show shipping calculator",
"default": false
},
{
"type": "text",
"id": "shipping_calculator_default_country",
"label": "Default country selection",
"default": "United States"
},
{
"type": "paragraph",
"content": "If your customer is logged-in, the country in their default shipping address will be selected."
}
]
}
{% endschema %}


