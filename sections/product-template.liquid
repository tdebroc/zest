{% assign show_single_variant_details = true %}

{% assign variant = product.selected_or_first_available_variant %}
{% assign featured_image = product.selected_or_first_available_variant.featured_media.preview_image | default: product.featured_media.preview_image %}

<div class="container product-container"
     data-section-type="product-template">{% render 'preorder-now-collection-item', product: product %}
    {% unless template contains 'lightbox' %}

        {% if collection %}
            <div class="inline-row">
                {% if collection %}
                    <div class="next-prev inline-item left links-row desktop">
      <span class="back-link">
        <span>{{ 'products.product.back_to' | t }}</span> <a href="{{ collection.url }}"
                                                             title="{{ collection.title | escape }}"
                                                             class="standard-link">{{ collection.title }}</a>
      </span>
                    </div>

                    <div class="inline-item right last desktop">
                        {% if collection.previous_product %}
                            <a class="standard-link"
                               href="{{ collection.previous_product }}">{{ 'products.product.previous' | t }}</a>
                            {% if collection.next_product %} <span class="divider">/</span> {% endif %}
                        {% endif %}

                        {% if collection.next_product %}
                            <a class="standard-link"
                               href="{{ collection.next_product }}">{{ 'products.product.next' | t }}</a>
                        {% endif %}
                    </div>
                {% endif %}

            </div>
        {% endif %}

    {% endunless %}

    <div class="row light-space-above space-under">
        {%- render 'media-gallery', product: product -%}

        <!-- begin product form and details -->
        <div class="half column product-details">
            <div class="border-bottom product-section padless-top cf product-title-row">
                {% if section.settings.prod_show_brand or section.settings.prod_show_type %}
                    <div class="brand-and-type feature-col">
                        {% if section.settings.prod_show_brand %}
                            {%- comment -%}
                            Do we have a collection that has the same name as our product vendor name?
                            If we do, let's have the vendor link point to it.
                            If not, we will point to the automatic vendor collection.
                            {%- endcomment -%}
                            {%- assign product_vendor_handle = product.vendor | handle -%}
                            {%- if collections[product_vendor_handle].handle == product_vendor_handle -%}
                                {%- assign vendor_url = collections[product_vendor_handle].url -%}
                            {%- else -%}
                                {%- assign vendor_url = product.vendor | url_for_vendor -%}
                            {%- endif -%}
                            <span class="brand">{{ product.vendor | link_to: vendor_url }}</span>
                        {% endif %}

                        {% if section.settings.prod_show_type and product.type != blank %}
                            {% if section.settings.prod_show_brand %}/{% endif %}

                            {%- assign product_type_handle = product.type | handle -%}
                            {%- if collections[product_type_handle].handle == product_type_handle -%}
                                {%- assign type_url = collections[product_type_handle].url -%}
                            {%- else -%}
                                {%- assign type_url = product.type | url_for_type -%}
                            {%- endif -%}
                            <span class="type">{{ product.type | link_to: type_url }}</span>
                        {% endif %}
                    </div>
                {% endif %}

                <h1 class="product-title">{{ product.title }}</h1>

                {% if section.settings.prod_show_weight %}
                    <div class="product-weight {% if variant.weight == blank or variant.weight <= 0 %}product-weight--no-weight{% endif %}">
                        <span class="product-weight__value">{% if variant.weight != blank and variant.weight > 0 %}{{ variant.weight | weight_with_unit }}{% endif %}</span>
                    </div>
                {% endif %}

                <div id="price"
                     class="product-price {% if variant.compare_at_price > variant.price %}on-sale{% endif %}">
                    <span class="current-price theme-money">{{ variant.price | money }}</span>
                    {% if variant.compare_at_price > variant.price %}
                        <span class="was-price theme-money">{{ variant.compare_at_price | money }}</span>
                    {% endif %}

                    {% render 'unit-price', variant: variant %}
                </div>

                {%- if section.settings.show_tax_and_shipping -%}
                    {%- if shop.taxes_included or shop.shipping_policy.body != blank -%}
                        <div class="product-policies rte">
                            {%- if shop.taxes_included -%}
                                {{ 'products.general.include_taxes' | t }}
                            {%- endif -%}
                            {%- if shop.shipping_policy.body != blank -%}
                                {{ 'products.general.shipping_policy_html' | t: link: shop.shipping_policy.url }}
                            {%- endif -%}
                        </div>
                    {%- endif -%}
                {%- endif -%}

                <div class="themed-product-reviews">
                    <div class="shopify-product-reviews-badge" data-id="{{ product.id }}"></div>
                </div>
            </div>

            <div class="product-section {% if section.settings.enable_payment_button %}padless-bottom{% endif %} {% unless section.settings.description_location == 'under' or template contains 'lightbox' %}border-bottom{% endunless %}">
                {% if section.settings.prod_show_sku %}
                    <div class="space-under sku {% if product.selected_or_first_available_variant.sku == blank %}sku--no-sku{% endif %}">{{ 'products.product.sku' | t }}
                        <span class="sku__value">{{ product.selected_or_first_available_variant.sku }}</span></div>
                {% endif %}

                {% capture history_state_data %}{% unless template contains 'lightbox' %}true{% else %}false{% endunless %}{% endcapture %}

                {%- if settings.cart_type contains 'drawer' -%}
                    {%- assign enable_ajax = true -%}
                {%- else -%}
                    {%- assign enable_ajax = false -%}
                {%- endif -%}
                {% form 'product', product, class: 'product-form', data-ajax-add-to-cart: enable_ajax, data-product-id: product.id, data-enable-history-state: history_state_data %}
                    {% if product.variants.size > 1 %}

                        <div class="option-selectors"
                             data-box-options="{{ section.settings.prod_clicky_opt_names | escape }}">
                            {% for option in product.options_with_values %}
                                <div class="selector-wrapper cf">
                                    {% if section.settings.show_size_chart and option.name == section.settings.size_chart_variant %}
                                        <div class="opposing-items">
                                            <label class="left"
                                                   for="option-{{ option.name | handle }}">{{ option.name }}</label>
                                            <span class="size-chart-container">
                    <a href="#size-chart-content" class="size-chart-link">
                      {{ 'products.product.size_chart' | t }}
                        {% render 'svg-chevron-right' %}
                    </a>
                    <div id="size-chart-content" class="hidden">
                      <div class="size-chart">
                        <div class="size-chart__inner rte">
                          {{ pages[section.settings.size_chart_page].content }}
                        </div>
                      </div>
                    </div>
                  </span>
                                        </div>
                                    {% else %}
                                        <label {% if option.name == 'default' %}class="hidden"{% endif %}
                                               for="option-{{ option.name | handle }}">{{ option.name }}</label>
                                    {% endif %}

                                    <select id="option-{{ option.name | handle }}">
                                        {% for value in option.values %}
                                            <option value="{{ value | escape }}"
                                                    {% if option.selected_value == value %}selected{% endif %}>
                                                {{ value }}
                                            </option>
                                        {% endfor %}
                                    </select>
                                </div>
                            {% endfor %}
                        </div>

                        <select name="id" class="original-selector"
                                aria-label="{{ 'products.product.selector_label' | t | escape }}">
                            {% for variant in product.variants %}
                                <option value="{{ variant.id }}"
                                        {% if variant == product.selected_or_first_available_variant %} selected="selected"{% endif %}
                                        data-stock="{% if variant.inventory_management == 'shopify' and variant.inventory_quantity <= 0 %}out{% endif %}"
                                    {% if section.settings.stock_warning_show and variant.inventory_management == 'shopify' and variant.inventory_quantity > 0 and variant.inventory_quantity <= section.settings.stock_warning_limit %}data-inventory="{{ variant.inventory_quantity }}"{% endif %}
                                    {% if section.settings.prod_show_weight and variant.weight != blank and variant.weight > 0 %}data-weight="{{ variant.weight | weight_with_unit }}"{% endif %}>
                                    {{- variant.title | escape -}}
                                </option>
                            {% endfor %}
                        </select>

                    {% else %}
                        {% unless show_single_variant_details == false or product.has_only_default_variant %}
                            {%- assign opt_idx = '' -%}
                            {%- capture option_list -%}
                                {%- for option in product.options -%}
                                    {%- if option != 'Title' -%}
                                        {%- assign opt_idx = 'option' | append: forloop.index -%}
                                        {{ option }}: {{ product.variants.first[opt_idx] }}<br/>
                                    {%- endif -%}
                                {%- endfor -%}
                            {%- endcapture -%}
                            {%- if opt_idx != blank -%}
                                <div class="selector-wrapper single-option">{{ option_list }}</div>
                            {%- endif -%}
                        {% endunless %}

                        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}"/>
                    {% endif %}

                    {% if product.available %}
                        {% if section.settings.stock_warning_show %}
                            {%- capture inventory_notice -%}
                                {%- if variant.inventory_management == 'shopify' and variant.inventory_quantity > 0 and variant.inventory_quantity <= section.settings.stock_warning_limit -%}
                                    <div class="product-inventory-notice">
                                        {{- 'products.labels.only_x_left' | t: quantity: variant.inventory_quantity -}}
                                    </div>
                                {%- else -%}
                                    <div class="product-inventory-notice product-inventory-notice--no-inventory"></div>
                                {%- endif -%}
                            {%- endcapture -%}
                        {% endif %}

                        {% unless section.settings.prod_show_quantity_input %}{{ inventory_notice }}{% endunless %}
                        {% unless section.settings.description_location == 'under' %}
                            <div class="product-description rte">{{ product.description }}</div>
                        {% endunless %}

                        <div id="product-properties"></div>
                        <fieldset id="more-products" style="display: none;"></fieldset>
                        <div id="mot-en-plus">
                            Un petit mot à nous zester ?
                            <textarea></textarea>
                        </div>

                        <div id="infiniteoptions-container"></div>

                        <div class="payment-and-quantity {% if section.settings.enable_payment_button %}payment-and-quantity--buttons-active{% endif %} {% if section.settings.prod_show_quantity_input %}payment-and-quantity--with-quantity{% endif %}">
                            <div id="infiniteoptions-container"></div>
                            {% if section.settings.prod_show_quantity_input %}
                                <div class="quantity">
                                    <label for="quantity">{{ 'products.product.quantity' | t }} {{ inventory_notice }}</label>

                                    <div class="qty-adjuster">
                                        <div class="qty-adjuster__inner">
                                            <a class="qty-adjuster__down" href="#" disabled>{% render 'svg-minus' %}</a>
                                            <input class="qty-adjuster__value" type="text" pattern="[0-9]*"
                                                   id="quantity" name="quantity" value="1">
                                            <a class="qty-adjuster__up" href="#">{% render 'svg-plus' %}</a>
                                        </div>
                                    </div>
                                </div>
                            {% else %}
                                <input type="hidden" name="quantity" value="1"/>
                            {% endif %}

                            <span class="payment-and-quantity__add">
                                <button onclick="handleAddToCartClick();return false;">
                                  {{ 'products.product.add_to_cart' | t }}
                                </button>
                                <div id="product-added-to-basket-message" style="display: none;">
                                    Bon Choix ! Ton Zest est dans ton panier !
                                </div>
                            </span>


                            {% if section.settings.enable_payment_button %}
                                {{ form | payment_button }}
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="rte space-below">
                            {{ 'products.product.product_unavailable_html' | t }}
                        </div>
                    {% endif %}
                    {%- if section.settings.show_recommendations -%}
                        <div class="product-recommendations" data-product-id="{{ product.id }}"
                             data-limit="{{ section.settings.products_per_row }}"
                             data-url="{{ routes.product_recommendations_url }}">
                            {%- if recommendations.performed and recommendations.products_count > 0 -%}
                                <section class="border-top section products-section">
                                    <div class="container">
                                        <h2 class="section-heading">{{ section.settings.recommendations_title }}</h2>
                                        <div class="product-grid row grid one-row" data-normheights=".image"
                                             data-normheights-inner="img">
                                            {%- for product in recommendations.products -%}
                                                {% render 'product-block', product: product %}
                                            {%- endfor -%}

                                            {%- for i in (1..section.settings.products_per_row) -%}
                                                <div class="product-block product-block--flex-spacer flex column max-cols-{{ section.settings.products_per_row }} min-cols-2"></div>
                                            {%- endfor -%}
                                        </div>
                                    </div>
                                </section>
                            {%- endif -%}
                        </div>
                    {%- endif -%}

                    {% if product.available and section.settings.show_backorder_text == true %}
                        {% render 'backorder', product: product, variant: current_variant %}
                    {% endif %}
                {% endform %}
        

            </div>

            {% if template contains 'lightbox' %}
                <div>
                    <a class="more-link"
                       href="{{ product.url | within: collection }}">{{ 'products.general.full_details' | t }}</a>
                </div>

            {% else %}


                {% if section.settings.show_sharing_icons %}
                    {% render 'social-sharing', share_title: product.title, share_permalink: product.url, share_image: product %}
                {% endif %}

            {% endif %}
        </div>
        <!-- end product form and details -->

    </div>

    {% unless template contains 'lightbox' %}

        {% if section.settings.description_location == 'under' %}
            <div class="product-description rte spaced-row reading-column">{{ product.description | replace: 'fullwidth"', '" data-fullwidth="true"' }}</div>
        {% endif %}

        <div class="theme-product-reviews-full">
            <div id="shopify-product-reviews" data-id="{{ product.id }}">{{ product.metafields.spr.reviews }}</div>
        </div>


        {% if collection %}
            <div class="links-row mobile-flex section border-top product-mob-collection-links">
                <a class="back-link" href="{{ collection.url }}" title="{{ collection.title | escape }}">
                    {% render 'svg-chevron-left' %} <span class="beside-svg standard-link">{{ collection.title }}</span>
                </a>

                <div>
                    {% if collection.previous_product %}
                        <a class="standard-link"
                           href="{{ collection.previous_product }}">{{ 'products.product.previous' | t }}</a>
                        {% if collection.next_product %} <span class="divider">/</span> {% endif %}
                    {% endif %}

                    {% if collection.next_product %}
                        <a class="standard-link"
                           href="{{ collection.next_product }}">{{ 'products.product.next' | t }}</a>
                    {% endif %}
                </div>
            </div>
        {% endif %}

    {% endunless %}
</div>

{% schema %}
{
"name": "Product pages",
"settings": [
{
"type": "checkbox",
"id": "prod_show_brand",
"label": "Show vendor name",
"default": true
},
{
"type": "checkbox",
"id": "prod_show_type",
"label": "Show product type",
"default": true
},
{
"type": "checkbox",
"id": "show_tax_and_shipping",
"label": "Show tax and shipping information",
"default": false
},
{
"type": "checkbox",
"id": "prod_show_weight",
"label": "Show weight",
"default": false
},
{
"type": "checkbox",
"id": "prod_show_sku",
"label": "Show SKU",
"default": false
},
{
"type": "checkbox",
"id": "stock_warning_show",
"label": "Show 'Low inventory' notice",
"default": false
},
{
"type": "range",
"id": "stock_warning_limit",
"min": 1,
"max": 10,
"step": 1,
"label": "Low inventory limit",
"default": 5,
"info": "When inventory drops below this value, the notice will show"
},
{
"type": "checkbox",
"id": "prod_show_quantity_input",
"label": "Show quantity box",
"default": true
},
{
"type": "text",
"id": "prod_clicky_opt_names",
"label": "Options to show as boxes",
"info": "Separate with commas, no spaces. E.g. Size,Color"
},
{
"type": "select",
"id": "description_location",
"label": "Product description location",
"default": "",
"options": [
{
"value": "",
"label": "In right hand column"
},
{
"value": "under",
"label": "Full page width"
}
]
},
{
"type": "checkbox",
"id": "enable_payment_button",
"label": "Show dynamic checkout button",
"info": "Each customer will see their preferred payment method from those available on your store, such as PayPal or Apple Pay. [Learn more](https://help.shopify.com/manual/using-themes/change-the-layout/dynamic-checkout)",
"default": true
},
{
"type": "checkbox",
"id": "show_backorder_text",
"label": "Show backorder text",
"default": true,
"info": "Only shows for products which use Shopify inventory tracking and are available to purchase when out of stock."
},
{
"type": "checkbox",
"id": "show_sharing_icons",
"label": "Show social sharing icons",
"default": true
},
{
"type": "header",
"content": "Media"
},
{
"type": "paragraph",
"content": "Learn more about [media types](https://help.shopify.com/en/manual/products/product-media)"
},
{
"type": "checkbox",
"id": "enable_video_looping",
"label": {
"en": "Enable video looping"
},
"default": false
},
{
"type": "checkbox",
"id": "enable_product_image_zoom",
"label": "Enable hover zoom",
"default": true
},
{
"type": "header",
"content": "Size chart"
},
{
"type": "checkbox",
"id": "show_size_chart",
"label": "Enable",
"default": false
},
{
"type": "text",
"id": "size_chart_variant",
"label": "Variant name",
"default": "Size"
},
{
"type": "page",
"id": "size_chart_page",
"label": "Page containing size chart"
}
]
}
{% endschema %}

{% javascript %}
var loadProductRecommendationsIntoSection = function() {
// Look for an element with class 'product-recommendations'
var productRecommendationsSection = document.querySelector(".product-recommendations");
if (productRecommendationsSection === null) { return; }
// Read product id from data attribute
var productId = productRecommendationsSection.dataset.productId;
// Read limit from data attribute
var limit = productRecommendationsSection.dataset.limit;
// Build request URL
var requestUrl = productRecommendationsSection.dataset.url + "?section_id=product-recommendations&limit="+limit+"&product_id="+productId;
// Create request and submit it using Ajax
var request = new XMLHttpRequest();
request.open("GET", requestUrl);
request.onload = function() {
if (request.status >= 200 && request.status < 300) {
var container = document.createElement("div");
container.innerHTML = request.response;
productRecommendationsSection.innerHTML = container.querySelector(".product-recommendations").innerHTML;
theme.loadProductGrid(productRecommendationsSection);
}
};
request.send();
};
// If your section has theme settings, the theme editor
// reloads the section as you edit those settings. When that happens, the
// recommendations need to be fetched again.
// See https://help.shopify.com/en/themes/development/sections#understand-the-interaction-between-theme-javascript-and-the-theme-editor
document.addEventListener("shopify:section:load", function(event) {
if (event.detail.sectionId === "product-recommendations") {
loadProductRecommendationsIntoSection();
}
});
// Fetching the recommendations on page load
loadProductRecommendationsIntoSection();
{% endjavascript %}


<script type="text/javascript">
    let variantSelector = ".option-selectors .selector-wrapper select[id^=option]";
    let productJson = {{ product | json }}

    function getVariantValue() {
        return parseInt($(variantSelector).val())
    }

    String.prototype.replaceAll = function(target, replacement) {
        return this.split(target).join(replacement);
    };
    {%- if product.tags contains "compose-ta-planche" -%}
	let variantToZestEnPlus = {
      1 : 1,
	  2 : 1,
	  3 : 1,
      4 : 2
    }

    let globalConfig = {
        properties: [
            {
                name: 'Tartinables',
                getRequiredItemNumber: function () {
                    return getVariantValue() + 1;
                },
                getTitleText: function () {
                    return "Choix de " + this.getRequiredItemNumber() + " Tartinables";
                },
                properties: [
                    {name: 'Tapenade'},
                    {name: 'Houmous de tomates séchées'},
                    {name: 'Crème de betterave roquefort'},
                    {name: 'Rillettes de sardines à l\'escabeche'},
                    {name: 'Houmous carottes jaune, curry, coco'},
                    {name: 'Crème d\'artichaut'},
                    {name: 'Poivronade'},
					{name: 'Crème de champignons'},
                ]
            },
            {
                name: 'Zest en +',
                getRequiredItemNumber: function () {
                    return variantToZestEnPlus[getVariantValue()];
                },
                getTitleText: function () {
                    return "Choix de " + this.getRequiredItemNumber() + " Zest en +";
                },
                properties: [
                    {name: 'Variété de charcuterie : Saucisson, chorizo'},
                    {name: 'Fromage de brebis'},
                    {name: 'Tortilla'}
                ]
            }
        ],
        moreProductsHandle: ["pain-aux-cereales", "biere-blonde", "biere-blanche"]
    }
    {% endif %}

    {%- if product.tags contains "planche-chaude" -%}
    let variantToRequired = {
        2: 2,
        3: 3,
        4: 4
    }
    // Use with variantToRequired[getVariantValue()]
    let globalConfig = {
        properties: [
            {
                name: 'Tartines',
                getRequiredItemNumber: function () {
                    return getVariantValue();
                },
                getTitleText: function () {
                    return "Choix de " + this.getRequiredItemNumber() + " Tartines";
                },
                properties: [
                    {name: 'La Zestiflette : Fondue de poireaux pommes de terre et reblochon fondant'},
                    {name: 'Le Chou-chou : Chou-fleur rôti aux épices humous crème de sésame'},
                    {name: 'La Parisienne : Champignons de Paris fromage frais citronné '},
                    {name: 'La Grosse courge : Butternut rôti au sirop d\'érable pomme granny acidulée'}
                ]
            },
            
        ],
        moreProductsHandle: ["vin-rouge-hukulum","mont-dor"]
    }
    {% endif %}


    function PropertiesSelector(propertyEl, propertyConfig) {
        $(variantSelector).change(onVariantChange);
        let parentEl = propertyEl
        parentEl.attr("property-name", propertyConfig.name)

        function onVariantChange() {
            let numberOfZester = $(this).val()
            displayProperties(numberOfZester)
        }

        function getNumberOfPropertiesChecked() {
            return parentEl.find("input:checked").length
        }

        function displayProperties() {
            parentEl.empty();
            parentEl.append("<div>" + propertyConfig.getTitleText() + "</div>")

            let fieldSetEl = $("<fieldset></fieldset>")

            for (let property of propertyConfig.properties) {
                let name = property.name;
                let labelEl = $("<label class='propertyLabel pointer'></label>")
                let inputEl = $("<input type='checkbox'  name='" + escape(name) + "' " +
                    " value='" + escape(name) + "' class='spb-productoptiontextcolor spb-productoptionbackground'/>")
                inputEl.click(onPropertySelected);
                labelEl.append(inputEl)
                labelEl.append("<span>&nbsp;&nbsp;" + name + "</span>")
                fieldSetEl.append(labelEl)
                fieldSetEl.append("<br/>")
            }
            parentEl.append(fieldSetEl)
        }

        function escape(name) {
            return name.replaceAll("'", "&apos;").replaceAll('"', "&quot;")
        }

        function onPropertySelected(event) {
            if (getNumberOfPropertiesChecked() > (propertyConfig.getRequiredItemNumber())) {
                event.target.checked = false
                return false;
            }
        }

        displayProperties(getVariantValue())
    }

    function MoreProduct(moreProductEl, moreProductsHandle) {
        function addProduct(product) {
            if (!product.available) {
                return;
            }
            $("#more-products").show();
            let name = product.title + " ( + " + (product.price / 100) + " € )";
            let labelEl = $("<label class='propertyLabel pointer'></label>")
            let inputEl = $("<input type='checkbox'  name='" + product.title + "' " +
                " variantId='" + product.variants[0].id + "' value='" + product.title +
                "' class='spb-productoptiontextcolor spb-productoptionbackground'/>")
            labelEl.append(inputEl)
            labelEl.append("<span>&nbsp;&nbsp;" + name + "</span>")
            moreProductEl.append(labelEl)
            moreProductEl.append("<br/>")
        }

        for (let moreProductConfig of moreProductsHandle) {
            fetch('/products/' + moreProductConfig + '.js')
                .then(response => response.json())
                .then(data => {
                    addProduct(data)
                });
        }
    }

    function init() {
        if (typeof(globalConfig) === "undefined" || !globalConfig) {
            return;
        }
        if (globalConfig.properties) {
            let productPropertiesEl = $("#product-properties")
            for (let propertyConfig of globalConfig.properties) {
                let propertyEl = $("<div class='product-property-block'></div>")
                productPropertiesEl.append(propertyEl);
                new PropertiesSelector(propertyEl, propertyConfig);
            }
        }
        if (globalConfig.moreProductsHandle) {
            new MoreProduct($('#more-products'), globalConfig.moreProductsHandle)
        }
    }

    init();

    function getMainProductVariantId() {
        let variantVal = $(variantSelector).val()
        for (let variant of productJson.variants) {
            if (variantVal === variant.title) {
                return variant.id
            }
        }
        return undefined;
    }

    function handleAddToCartClick() {
        if (!isThereEnoughProperties()) {
            return false;
        }
        let itemsArray = [];
        let mainProduct = {
            id: getMainProductVariantId(),
            quantity: $("#quantity").val(),
            properties: getProperties()
        }
        itemsArray.push(mainProduct);
        let motEnPlus = $("#mot-en-plus textarea").val()
        if (motEnPlus.trim().length !== 0) {
            let id = "Un petit Mot à nous Zester ?";
            mainProduct.properties[id] = motEnPlus;
        }
        addMoreProducts(itemsArray)
        let formData = {
            items: itemsArray
        }
        console.log("formData", formData);
        addProductToCart(formData)
    }

    function addMoreProducts(itemsArray) {
        let productsToAdd = $("#more-products").find("input:checked")
        for (let i = 0; i < productsToAdd.length; i++) {
            let variantId = parseInt(productsToAdd.eq(0).attr("variantId"));
            itemsArray.push({
                id: variantId,
                quantity: 1
            })
        }

    }

    function isThereEnoughProperties() {
        let propertiesBlock = $("#product-properties").find(".product-property-block")
        for (let i = 0; i < propertiesBlock.length; i++) {
            let propertyBlockEl = propertiesBlock.eq(i);
            let optionsChecked = propertyBlockEl.find("input:checked");
            if (globalConfig.properties[i].getRequiredItemNumber() > optionsChecked.length) {
                let option = globalConfig.properties[i].getRequiredItemNumber() > 1 ? "options" : "option";
                alert("Vous devez choisir " + globalConfig.properties[i].getRequiredItemNumber()
                    + " " + option + " pour les " + globalConfig.properties[i].name + ".")
                return false;
            }
        }
        return true;
    }

    function getProperties() {
        let properties = {}
        let propertiesBlock = $("#product-properties").find(".product-property-block")

        for (let i = 0; i < propertiesBlock.length; i++) {
            let propertyBlockEl = propertiesBlock.eq(i);
            let propertyName = propertyBlockEl.attr("property-name")
            let optionsChecked = propertyBlockEl.find("input:checked");
            let propertyValue = "";

            for (let i = 0; i < optionsChecked.length; i++) {
                propertyValue += optionsChecked.eq(i).attr("name")
                propertyValue += (i === optionsChecked.length - 1) ? "" : " | ";
            }
            properties[propertyName] = propertyValue;
        }
        return properties;
    }

    function addProductToCart(formData) {
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(formData)
        }).then(json => {
            if (json.status === 422) {
                alert("Désolé, le produit n'est plus en Stock !")
            } else {
                console.log("json add product answer:", json);
                // window.location = "/cart";
                productAdded();
            }
        }).catch((error) => {
            console.error('Error:', error);
        });
    }
    let currentCartMoneyEl = $('.current-cart .theme-money')
    let productAddedMessage =$("#product-added-to-basket-message")
    function productAdded() {
        productAddedMessage.show(500);
        Shopify.getCart(function(cart) {
            let currency = currentCartMoneyEl.text()[0];
            currentCartMoneyEl.text(currency + "" + cart.total_price / 100);
            setTimeout(function() {
                productAddedMessage.hide(500);
            }, 5000)
        })
    }


</script>
